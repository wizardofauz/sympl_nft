schema Address:
    address: str
    operator: str

schema NFT:
    id: Identifier
    name: str
    symbol: str
    creator: Address
    balances: Dict[int]
    max_mint: Optional[int]
    mint_count: int
    metadata: str

# Returns all the nfts in our storage
@clientside
def get_nfts() -> List[NFT]:
    return _get_nfts()

@helper
def _get_nfts() -> List[NFT]:
    return [row.value for row in cvm.storage.query(NFTStatic).execute() ]

# Returns a specific NFT (if it exists)
@clientside
def get_nft(id: Identifier) -> Optional[NFT]:
    return cvm.storage.get(PUBLIC, NFTStatic, id)

# Create an nft.
@clientside
def create_nft(name: str, symbol: str, owner_address: str, max_mint: Optional[int], metadata: str) -> None:
    cvm.job_start()
    address = Address(address = owner_address
                     , operator = cvm.tx.key_alias)
    with PostTxArgs(PUBLIC):
        _create_nft(name, symbol, address, max_mint, metadata)

@clientside
def creator_of(id: Identifier) -> Address:
    return _get_creator(id)

@clientside
def mint(to: str, nft_id: Identifier) -> None:
    cvm.job_start()
    with PostTxArgs(PUBLIC):
        _mint(to, nft_id)

@clientside
def burn(to: str, nft_id: Identifier) -> None:
    cvm.job_start()
    with PostTxArgs(PUBLIC):
        _burn(to, nft_id)

@clientside
def transfer(_from: str, to: str, nft_id: Identifier) -> None:
    nft = cvm.storage.get(PUBLIC, NFTStatic, nft_id)
    if isinstance(nft,  None):
        cvm.error(f"NFT {nft_id} not found.")
    cvm.job_start()
    with PostTxArgs(PUBLIC):
        _transfer(_from, to, nft_id)

@helper
def _get_creator(id: Identifier) -> Address:
    nft = cvm.storage.get(PUBLIC, NFTStatic, id)
    if isinstance(nft,  None):
        cvm.error(f"NFT {id} not found.")
    return nft.creator

@helper
def _get_nft(id: Identifier) -> Optional[NFT]:
    nft = cvm.storage.get(PUBLIC, NFTStatic, id)
    return nft

# Executable to create an nft.
@executable
def _create_nft(name: str, symbol: str, owner_address: Address, max_mint: Optional[int], metadata: str) -> None:
    id = cvm.generate_id('NFT')
    nft = NFT(id = id
             , name = name
             , symbol = symbol
             , creator = owner_address
             , balances = { owner_address.address: 1 }
             , max_mint = max_mint
             , mint_count = 1
             , metadata = metadata)
    cvm.storage.put(id, nft)
    cvm.job_complete(std.json(nft))

@executable
def _mint(to: str, nft_id: Identifier) -> None:
    nft = _get_nft(nft_id)
    if isinstance(nft,  None):
        cvm.error(f"NFT {nft_id} not found.")
    # This syntax feels very wrong
    if maybe@[int](0, nft.max_mint) > 0:
        max = nft.max_mint
        if maybe@[int](0, max) <= nft.mint_count:
            cvm.error(f"NFT {nft_id} is no longer mintable.")
    # Should this work?
    # if not isinstance(nft.max_mint, None):
    #     if nft.max_mint <= nft.mint_count:
    #           cvm.error(f"NFT {nft_id} is no longer mintable.")
    count = nft.balances.get(to, 0)
    nft.balances[to] = count+1
    nft.mint_count = nft.mint_count+1
    cvm.storage.put(nft_id, nft)

@executable
def _burn(to: str, nft_id: Identifier) -> None:
    nft = _get_nft(nft_id)
    if isinstance(nft,  None):
        cvm.error(f"NFT {nft_id} not found.")
    count = nft.balances.get(to, 0)
    if count == 0:
        cvm.error(f"Cannot burn an NFT you dont own.")
    nft.balances[to] = count-1
    cvm.storage.put(nft_id, nft)

@executable
def _transfer(_from: str, to: str, nft_id: Identifier) -> None:
    nft = _get_nft(nft_id)
    actor : str = cvm.tx.key_alias
    if isinstance(nft,  None):
        cvm.error(f"NFT {nft_id} not found.")
    if nft.creator.operator != actor:
        cvm.error(f"Action forbidden as not the operator of this NFT.")
    from_count = nft.balances.get(_from, 0)
    if from_count == 0:
        cvm.error(f"Cannot transfer an NFT not owned by {from_count}.")
    nft.balances[_from] = from_count-1
    to_count = nft.balances.get(to, 0)
    nft.balances[to] = to_count+1
    cvm.storage.put(nft_id, nft)
